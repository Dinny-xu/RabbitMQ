package com.study.rabbitmq.work;

import com.rabbitmq.client.CancelCallback;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.DeliverCallback;
import com.study.rabbitmq.utils.RabbitMqUtils;

/*
 * 工作模式 Work Queues
 * 一个消息发送线程Task01
 * 两个Work01 工作线程
 * Task01 发送消息
 * Work01 开启2个线程，进行轮询消费
 * 当有多个消费者同时监听一个队列时，RabbitMQ默认将消息逐一顺序分配给各消费者，该消息分配机制称为轮询（Round-Robin）
 */
public class Work01 {

    private final static String QUEUE_NAME = "task01";

    public static void main(String[] arg) throws Exception{

        Channel channel = RabbitMqUtils.getChannel();
        DeliverCallback deliverCallback = ((consumerTag, delivery) -> {
            String receiverMessage = new String(delivery.getBody());
            System.out.println("接收到消息:" + receiverMessage);
        });

        CancelCallback cancelCallback = (consumerTag -> {
            System.out.println(consumerTag + "消费者取消消费接口回调逻辑");
        });
        System.out.println("C1 消费者启动等待消费");
        /*
         * @param queue the name of the queue
         * @param autoAck true if the server should consider messages
         * acknowledged once delivered; false if the server should expect
         * explicit acknowledgements
         * @param deliverCallback callback when a message is delivered
         * @param cancelCallback callback when the consumer is cancelled
         * @return the consumerTag generated by the server
         */
        channel.basicConsume(QUEUE_NAME, true, deliverCallback, cancelCallback);
    }

}
